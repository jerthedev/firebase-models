<?php

namespace JTD\FirebaseModels\Tests\Unit\Cache;

use JTD\FirebaseModels\Cache\QueryCacheKey;
use JTD\FirebaseModels\Tests\TestSuites\UnitTestSuite;
use PHPUnit\Framework\Attributes\Test;

/**
 * QueryCacheKeyTest
 * 
 * Converted from describe/it structure to PHPUnit class methods.
 * Generated by PHPUnit 12 Modernization Tool.
 */
class QueryCacheKeyTest extends UnitTestSuite
{
    #[Test]
    public function it_generates_consistent_keys_for_identical_queries()
    {
        $queryData = [
        'wheres' => [['field' => 'status', 'operator' => '=', 'value' => 'active']],
        'orders' => [['field' => 'created_at', 'direction' => 'desc']],
        'limit' => 10,
        ];
        $key1 = QueryCacheKey::generate('users', $queryData);
        $key2 = QueryCacheKey::generate('users', $queryData);
        expect($key1)->toBe($key2);
        expect($key1)->toMatch('/^firestore_query:users:[a-f0-9]{64}$/');
    }

    #[Test]
    public function it_generates_different_keys_for_different_collections()
    {
        $queryData = ['limit' => 10];
        $key1 = QueryCacheKey::generate('users', $queryData);
        $key2 = QueryCacheKey::generate('posts', $queryData);
        expect($key1)->not->toBe($key2);
    }

    #[Test]
    public function it_generates_different_keys_for_different_query_data()
    {
        $queryData1 = ['limit' => 10];
        $queryData2 = ['limit' => 20];
        $key1 = QueryCacheKey::generate('users', $queryData1);
        $key2 = QueryCacheKey::generate('users', $queryData2);
        expect($key1)->not->toBe($key2);
    }

    #[Test]
    public function it_generates_document_cache_keys()
    {
        $key = QueryCacheKey::generateForDocument('users', 'user-123');
        expect($key)->toBe('firestore_doc:users:user-123');
    }

    #[Test]
    public function it_generates_different_keys_for_different_documents()
    {
        $key1 = QueryCacheKey::generateForDocument('users', 'user-123');
        $key2 = QueryCacheKey::generateForDocument('users', 'user-456');
        expect($key1)->not->toBe($key2);
    }

    #[Test]
    public function it_generates_count_cache_keys()
    {
        $queryData = ['wheres' => [['field' => 'active', 'operator' => '=', 'value' => true]]];
        $key = QueryCacheKey::generateForCount('users', $queryData);
        expect($key)->toMatch('/^firestore_count:users:[a-f0-9]{64}$/');
    }

    #[Test]
    public function it_generates_consistent_count_keys_for_identical_queries()
    {
        $queryData = ['limit' => 100];
        $key1 = QueryCacheKey::generateForCount('users', $queryData);
        $key2 = QueryCacheKey::generateForCount('users', $queryData);
        expect($key1)->toBe($key2);
    }

    #[Test]
    public function it_generates_exists_cache_keys()
    {
        $queryData = ['wheres' => [['field' => 'email', 'operator' => '=', 'value' => 'test@example.com']]];
        $key = QueryCacheKey::generateForExists('users', $queryData);
        expect($key)->toMatch('/^firestore_exists:users:[a-f0-9]{64}$/');
    }

    #[Test]
    public function it_generates_batch_cache_keys()
    {
        $documentPaths = [
        'users/user-1',
        'users/user-2',
        'posts/post-1',
        ];
        $key = QueryCacheKey::generateForBatch($documentPaths);
        expect($key)->toMatch('/^firestore_batch:[a-f0-9]{64}$/');
    }

    #[Test]
    public function it_generates_consistent_keys_regardless_of_path_order()
    {
        $paths1 = ['users/user-1', 'users/user-2', 'posts/post-1'];
        $paths2 = ['posts/post-1', 'users/user-2', 'users/user-1'];
        $key1 = QueryCacheKey::generateForBatch($paths1);
        $key2 = QueryCacheKey::generateForBatch($paths2);
        expect($key1)->toBe($key2);
    }

    #[Test]
    public function it_normalizes_nested_arrays_consistently()
    {
        $queryData1 = [
        'wheres' => [
        ['field' => 'status', 'operator' => '=', 'value' => 'active'],
        ],
        'orders' => [['field' => 'name', 'direction' => 'asc']],
        ];
        $queryData2 = [
        'orders' => [['field' => 'name', 'direction' => 'asc']],
        'wheres' => [
        ['field' => 'status', 'operator' => '=', 'value' => 'active'],
        ],
        ];
        $key1 = QueryCacheKey::generate('users', $queryData1);
        $key2 = QueryCacheKey::generate('users', $queryData2);
        // Keys should be the same after normalization (same structure, different key order)
        expect($key1)->toBe($key2);
    }

    #[Test]
    public function it_handles_objects_in_query_data()
    {
        $queryData = [
        'wheres' => [
        ['field' => 'metadata', 'operator' => '=', 'value' => (object) ['key' => 'value']],
        ],
        ];
        $key = QueryCacheKey::generate('users', $queryData);
        expect($key)->toBeString();
        expect($key)->toMatch('/^firestore_query:users:[a-f0-9]{64}$/');
    }

    #[Test]
    public function it_validates_query_keys_correctly()
    {
        $validKeys = [
        'firestore_query:users:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',
        'firestore_query:posts/comments:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890',
        'firestore_doc:users:user-123',
        'firestore_doc:posts/comments:comment-456',
        'firestore_count:users:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',
        'firestore_exists:posts:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890',
        'firestore_batch:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',
        ];
        foreach ($validKeys as $key) {
        expect(QueryCacheKey::isValid($key))->toBeTrue();
        }
    }

    #[Test]
    public function it_rejects_invalid_keys()
    {
        $invalidKeys = [
        'invalid_key',
        'firestore_query:users:invalid_hash',
        'firestore_doc:users',
        'firestore_count:users:short',
        'random_string',
        '',
        ];
        foreach ($invalidKeys as $key) {
        expect(QueryCacheKey::isValid($key))->toBeFalse();
        }
    }

    #[Test]
    public function it_extracts_collection_from_query_keys()
    {
        $key = 'firestore_query:users:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef';
        $collection = QueryCacheKey::extractCollection($key);
        expect($collection)->toBe('users');
    }

    #[Test]
    public function it_extracts_collection_from_document_keys()
    {
        $key = 'firestore_doc:posts/comments:comment-123';
        $collection = QueryCacheKey::extractCollection($key);
        expect($collection)->toBe('posts/comments');
    }

    #[Test]
    public function it_returns_null_for_invalid_keys()
    {
        $collection = QueryCacheKey::extractCollection('invalid_key');
        expect($collection)->toBeNull();
    }

    #[Test]
    public function it_returns_null_for_batch_keys()
    {
        $key = 'firestore_batch:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef';
        $collection = QueryCacheKey::extractCollection($key);
        expect($collection)->toBeNull();
    }

    #[Test]
    public function it_generates_collection_prefix_patterns()
    {
        $prefix = QueryCacheKey::getCollectionPrefix('users');
        expect($prefix)->toBe('firestore_*:users:*');
    }

    #[Test]
    public function it_handles_nested_collection_paths()
    {
        $prefix = QueryCacheKey::getCollectionPrefix('posts/comments');
        expect($prefix)->toBe('firestore_*:posts/comments:*');
    }

    #[Test]
    public function it_handles_empty_query_data()
    {
        $key = QueryCacheKey::generate('users', []);
        expect($key)->toBeString();
        expect($key)->toMatch('/^firestore_query:users:[a-f0-9]{64}$/');
    }

    #[Test]
    public function it_handles_null_values_in_query_data()
    {
        $queryData = [
        'limit' => null,
        'offset' => null,
        'wheres' => [],
        ];
        $key = QueryCacheKey::generate('users', $queryData);
        expect($key)->toBeString();
        expect($key)->toMatch('/^firestore_query:users:[a-f0-9]{64}$/');
    }

    #[Test]
    public function it_handles_special_characters_in_collection_names()
    {
        $key = QueryCacheKey::generate('users-test_collection', []);
        expect($key)->toBeString();
        expect($key)->toMatch('/^firestore_query:users-test_collection:[a-f0-9]{64}$/');
    }

    #[Test]
    public function it_handles_very_large_query_data()
    {
        $largeQueryData = [
        'wheres' => array_fill(0, 100, ['field' => 'test', 'operator' => '=', 'value' => 'value']),
        'orders' => array_fill(0, 50, ['field' => 'field', 'direction' => 'asc']),
        'metadata' => str_repeat('a', 10000),
        ];
        $key = QueryCacheKey::generate('users', $largeQueryData);
        expect($key)->toBeString();
        expect($key)->toMatch('/^firestore_query:users:[a-f0-9]{64}$/');
    }

}
