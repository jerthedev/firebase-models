<?php

namespace JTD\FirebaseModels\Tests\Unit\Cache;

use JTD\FirebaseModels\Cache\CacheManager;
use JTD\FirebaseModels\Cache\PersistentCache;
use JTD\FirebaseModels\Cache\RequestCache;
use JTD\FirebaseModels\Tests\TestSuites\UnitTestSuite;
use PHPUnit\Framework\Attributes\Test;

/**
 * CacheDisableMechanismTest
 *
 * Converted from describe/it structure to PHPUnit class methods.
 * Generated by PHPUnit 12 Modernization Tool.
 */
class CacheDisableMechanismTest extends UnitTestSuite
{
    protected function setUp(): void
    {
        parent::setUp();
        // Reset cache states
        RequestCache::clear();
        RequestCache::resetStats();
        PersistentCache::resetStats();
        // Reset to default enabled state
        RequestCache::enable();
        PersistentCache::enable();
        // Reset cache manager configuration
        CacheManager::configure([
            'request_cache_enabled' => true,
            'persistent_cache_enabled' => true,
            'default_ttl' => 3600,
            'default_store' => null,
            'auto_promote' => true,
        ]);
    }

    #[Test]
    public function it_disables_both_request_and_persistent_cache_when_global_cache_disabled()
    {
        // Simulate global cache disabled configuration
        config(['firebase-models.cache.enabled' => false]);
        // Simulate service provider configuration logic
        $globalEnabled = config('firebase-models.cache.enabled', true);
        $requestEnabled = $globalEnabled && config('firebase-models.cache.request_enabled', true);
        $persistentEnabled = $globalEnabled && config('firebase-models.cache.persistent_enabled', true);
        // Configure cache manager with proper enabled states
        CacheManager::configure([
            'request_cache_enabled' => $requestEnabled,
            'persistent_cache_enabled' => $persistentEnabled,
            'default_ttl' => 3600,
            'default_store' => null,
            'auto_promote' => true,
        ]);
        // Enable/disable individual cache components
        if ($requestEnabled) {
            RequestCache::enable();
        } else {
            RequestCache::disable();
        }
        if ($persistentEnabled) {
            PersistentCache::enable();
        } else {
            PersistentCache::disable();
        }
        // Verify both caches are disabled
        expect(RequestCache::isEnabled())->toBeFalse();
        expect(PersistentCache::isEnabled())->toBeFalse();
        // Verify cache manager configuration reflects disabled state
        $config = CacheManager::getConfig();
        expect($config['request_cache_enabled'])->toBeFalse();
        expect($config['persistent_cache_enabled'])->toBeFalse();
    }

    #[Test]
    public function it_respects_individual_cache_settings_when_global_cache_enabled()
    {
        // Simulate global cache enabled but individual components disabled
        config([
            'firebase-models.cache.enabled' => true,
            'firebase-models.cache.request_enabled' => false,
            'firebase-models.cache.persistent_enabled' => true,
        ]);
        // Simulate service provider configuration logic
        $globalEnabled = config('firebase-models.cache.enabled', true);
        $requestEnabled = $globalEnabled && config('firebase-models.cache.request_enabled', true);
        $persistentEnabled = $globalEnabled && config('firebase-models.cache.persistent_enabled', true);
        // Configure cache manager
        CacheManager::configure([
            'request_cache_enabled' => $requestEnabled,
            'persistent_cache_enabled' => $persistentEnabled,
            'default_ttl' => 3600,
            'default_store' => null,
            'auto_promote' => true,
        ]);
        // Enable/disable individual cache components
        if ($requestEnabled) {
            RequestCache::enable();
        } else {
            RequestCache::disable();
        }
        if ($persistentEnabled) {
            PersistentCache::enable();
        } else {
            PersistentCache::disable();
        }
        // Verify request cache is disabled, persistent cache is enabled
        expect(RequestCache::isEnabled())->toBeFalse();
        expect(PersistentCache::isEnabled())->toBeTrue();
        // Verify cache manager configuration
        $config = CacheManager::getConfig();
        expect($config['request_cache_enabled'])->toBeFalse();
        expect($config['persistent_cache_enabled'])->toBeTrue();
    }

    #[Test]
    public function it_returns_default_value_when_both_caches_are_disabled()
    {
        // Disable both caches
        CacheManager::configure([
            'request_cache_enabled' => false,
            'persistent_cache_enabled' => false,
            'default_ttl' => 3600,
            'default_store' => null,
            'auto_promote' => true,
        ]);
        RequestCache::disable();
        PersistentCache::disable();
        // Try to get a value that doesn't exist
        $result = CacheManager::get('test_key', 'default_value');
        expect($result)->toBe('default_value');
    }

    #[Test]
    public function it_not_store_values_when_both_caches_are_disabled()
    {
        // Disable both caches
        CacheManager::configure([
            'request_cache_enabled' => false,
            'persistent_cache_enabled' => false,
            'default_ttl' => 3600,
            'default_store' => null,
            'auto_promote' => true,
        ]);
        RequestCache::disable();
        PersistentCache::disable();
        // Try to store a value
        $result = CacheManager::put('test_key', 'test_value');
        // Put should still return true (no error)
        expect($result)->toBeTrue();
        // But the value should not be retrievable
        $retrieved = CacheManager::get('test_key', 'default');
        expect($retrieved)->toBe('default');
    }

    #[Test]
    public function it_uses_remember_callback_when_caches_are_disabled()
    {
        // Disable both caches
        CacheManager::configure([
            'request_cache_enabled' => false,
            'persistent_cache_enabled' => false,
            'default_ttl' => 3600,
            'default_store' => null,
            'auto_promote' => true,
        ]);
        RequestCache::disable();
        PersistentCache::disable();
        $callbackExecuted = false;
        // Use remember method
        $result = CacheManager::remember('test_key', function () use (&$callbackExecuted) {
            $callbackExecuted = true;

            return 'callback_result';
        });
        // Callback should be executed and result returned
        expect($callbackExecuted)->toBeTrue();
        expect($result)->toBe('callback_result');
        // Second call should execute callback again (no caching)
        $callbackExecuted = false;
        $result2 = CacheManager::remember('test_key', function () use (&$callbackExecuted) {
            $callbackExecuted = true;

            return 'callback_result_2';
        });
        expect($callbackExecuted)->toBeTrue();
        expect($result2)->toBe('callback_result_2');
    }
}
