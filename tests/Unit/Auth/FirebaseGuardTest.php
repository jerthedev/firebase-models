<?php

namespace JTD\FirebaseModels\Tests\Unit\Auth;

use Illuminate\Http\Request;
use JTD\FirebaseModels\Auth\FirebaseGuard;
use JTD\FirebaseModels\Auth\FirebaseUserProvider;
use JTD\FirebaseModels\Auth\User;
use JTD\FirebaseModels\Tests\TestSuites\UnitTestSuite;
use Mockery as m;
use PHPUnit\Framework\Attributes\Test;

/**
 * FirebaseGuardTest
 *
 * Converted from describe/it structure to PHPUnit class methods.
 * Generated by PHPUnit 12 Modernization Tool.
 */
class FirebaseGuardTest extends UnitTestSuite
{
    protected function setUp(): void
    {
        parent::setUp();
        $this->clearFirestoreMocks();
        // Mock Firebase Auth
        $this->firebaseAuth = m::mock(\Kreait\Firebase\Contract\Auth::class);
        // Mock User Provider
        $this->userProvider = m::mock(FirebaseUserProvider::class);
        // Mock Request
        $this->request = m::mock(Request::class);
        // Create guard instance
        $this->guard = new FirebaseGuard(
            $this->userProvider,
            $this->request,
            $this->firebaseAuth
        );
    }

    protected function tearDown(): void
    {
        m::close();
        parent::tearDown();
    }

    #[Test]
    public function it_get_token_from_authorization_header()
    {
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn('Bearer test-token-123');
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $token = $this->guard->getTokenForRequest();
        expect($token)->toBe('test-token-123');
    }

    #[Test]
    public function it_get_token_from_query_parameter()
    {
        $this->request->shouldReceive('query')->with('token')->andReturn('query-token-123');
        $token = $this->guard->getTokenForRequest();
        expect($token)->toBe('query-token-123');
    }

    #[Test]
    public function it_get_token_from_input_parameter()
    {
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn('input-token-123');
        $token = $this->guard->getTokenForRequest();
        expect($token)->toBe('input-token-123');
    }

    #[Test]
    public function it_get_token_from_cookie()
    {
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn('cookie-token-123');
        $token = $this->guard->getTokenForRequest();
        expect($token)->toBe('cookie-token-123');
    }

    #[Test]
    public function it_returns_null_when_no_token_found()
    {
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $token = $this->guard->getTokenForRequest();
        expect($token)->toBeNull();
    }

    #[Test]
    public function it_authenticate_user_with_valid_token()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $mockUser = m::mock(User::class);
        $mockUser->shouldReceive('setFirebaseToken')->with($mockToken);
        $this->request->shouldReceive('query')->with('token')->andReturn('valid-token');
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $this->firebaseAuth->shouldReceive('verifyIdToken')->with('valid-token')->andReturn($mockToken);
        $this->userProvider->shouldReceive('retrieveById')->with('test-uid-123')->andReturn($mockUser);
        $user = $this->guard->user();
        expect($user)->toBe($mockUser);
    }

    #[Test]
    public function it_returns_null_for_invalid_token()
    {
        $this->request->shouldReceive('query')->with('token')->andReturn('invalid-token');
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
            ->with('invalid-token')
            ->andThrow(new \Exception('Invalid token'));
        $user = $this->guard->user();
        expect($user)->toBeNull();
    }

    #[Test]
    public function it_returns_null_when_no_token_provided()
    {
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $user = $this->guard->user();
        expect($user)->toBeNull();
    }

    #[Test]
    public function it_validates_credentials_with_valid_token()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
            ->with('valid-token')
            ->andReturn($mockToken);
        $result = $this->guard->validate(['token' => 'valid-token']);
        expect($result)->toBeTrue();
    }

    #[Test]
    public function it_fails_validation_with_invalid_token()
    {
        $this->firebaseAuth->shouldReceive('verifyIdToken')
            ->with('invalid-token')
            ->andThrow(new \Exception('Invalid token'));
        $result = $this->guard->validate(['token' => 'invalid-token']);
        expect($result)->toBeFalse();
    }

    #[Test]
    public function it_fails_validation_with_no_token()
    {
        $result = $this->guard->validate([]);
        expect($result)->toBeFalse();
    }

    #[Test]
    public function it_attempt_authentication_with_valid_credentials()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        // Use a real User instance instead of a mock to ensure instanceof works
        $mockUser = new User(['uid' => 'test-uid-123']);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
            ->with('valid-token')
            ->andReturn($mockToken);
        $this->userProvider->shouldReceive('retrieveById')
            ->with('test-uid-123')
            ->andReturn($mockUser);
        // If retrieveById returns null, the guard will call retrieveByCredentials
        $this->userProvider->shouldReceive('retrieveByCredentials')
            ->with(['token' => 'valid-token'])
            ->andReturn(null);
        $result = $this->guard->attempt(['token' => 'valid-token']);
        expect($result)->toBeTrue();
        // After successful attempt, the user should be set in the guard
        expect($this->guard->hasUser())->toBeTrue();
        expect($this->guard->user())->toBe($mockUser);
    }

    #[Test]
    public function it_fails_attempt_with_invalid_credentials()
    {
        $this->firebaseAuth->shouldReceive('verifyIdToken')
            ->with('invalid-token')
            ->andThrow(new \Exception('Invalid token'));
        $result = $this->guard->attempt(['token' => 'invalid-token']);
        expect($result)->toBeFalse();
        expect($this->guard->user())->toBeNull();
    }

    #[Test]
    public function it_check_if_user_authenticated()
    {
        // No user set - need to set up request expectations for check() call
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        expect($this->guard->check())->toBeFalse();
        expect($this->guard->guest())->toBeTrue();
        // Set a user
        $mockUser = m::mock(User::class);
        $this->guard->setUser($mockUser);
        expect($this->guard->check())->toBeTrue();
        expect($this->guard->guest())->toBeFalse();
    }

    #[Test]
    public function it_get_user_id()
    {
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        expect($this->guard->id())->toBeNull();
        $mockUser = m::mock(User::class);
        $mockUser->shouldReceive('getAuthIdentifier')->andReturn('test-uid-123');
        $this->guard->setUser($mockUser);
        expect($this->guard->id())->toBe('test-uid-123');
    }

    #[Test]
    public function it_logout_user()
    {
        $mockUser = m::mock(User::class);
        $this->guard->setUser($mockUser);
        expect($this->guard->check())->toBeTrue();
        $this->guard->logout();
        // Set up expectations for the check() and user() calls after logout
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        expect($this->guard->check())->toBeFalse();
        expect($this->guard->user())->toBeNull();
    }

    #[Test]
    public function it_check_if_guard_user()
    {
        expect($this->guard->hasUser())->toBeFalse();
        $mockUser = m::mock(User::class);
        $this->guard->setUser($mockUser);
        expect($this->guard->hasUser())->toBeTrue();
    }

    #[Test]
    public function it_set_and_get_request()
    {
        $newRequest = m::mock(Request::class);
        $result = $this->guard->setRequest($newRequest);
        expect($result)->toBe($this->guard);
        expect($this->guard->getRequest())->toBe($newRequest);
    }

    #[Test]
    public function it_get_firebase_auth_instance()
    {
        expect($this->guard->getFirebaseAuth())->toBe($this->firebaseAuth);
    }
}
