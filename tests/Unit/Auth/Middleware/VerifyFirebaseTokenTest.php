<?php

namespace JTD\FirebaseModels\Tests\Unit\Auth\Middleware;

use JTD\FirebaseModels\Auth\Middleware\VerifyFirebaseToken;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Mockery as m;
use JTD\FirebaseModels\Tests\TestSuites\UnitTestSuite;
use PHPUnit\Framework\Attributes\Test;

/**
 * VerifyFirebaseTokenTest
 * 
 * Converted from describe/it structure to PHPUnit class methods.
 * Generated by PHPUnit 12 Modernization Tool.
 */
class VerifyFirebaseTokenTest extends UnitTestSuite
{
    protected function setUp(): void
    {
        parent::setUp();
        $this->clearFirestoreMocks();
        // Mock Firebase Auth
        $this->firebaseAuth = m::mock(\Kreait\Firebase\Contract\Auth::class);
        // Create middleware instance
        $this->middleware = new VerifyFirebaseToken($this->firebaseAuth);
        // Mock request
        $this->request = m::mock(Request::class);
        // Mock next closure
        $this->next = function ($request) {
        return new Response('Success');
        };
    }

    protected function tearDown(): void
    {
        m::close();
        parent::tearDown();
    }

    #[Test]
    public function it_verifies_valid_token_and_continues()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockClaims->shouldReceive('all')->andReturn([
        'sub' => 'test-uid-123',
        'email' => 'test@example.com',
        'iss' => 'firebase',
        'aud' => 'project-id',
        ]);
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn('Bearer valid-token');
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('valid-token')
        ->andReturn($mockToken);
        // Mock request attributes
        $this->request->attributes = new \Symfony\Component\HttpFoundation\ParameterBag();
        $response = $this->middleware->handle($this->request, $this->next);
        expect($response->getContent())->toBe('Success');
    }

    #[Test]
    public function it_token_from_query_parameter()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockClaims->shouldReceive('all')->andReturn(['sub' => 'test-uid-123']);
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('query')->with('token')->andReturn('query-token');
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('query-token')
        ->andReturn($mockToken);
        $this->request->attributes = new \Symfony\Component\HttpFoundation\ParameterBag();
        $response = $this->middleware->handle($this->request, $this->next);
        expect($response->getContent())->toBe('Success');
    }

    #[Test]
    public function it_token_from_input_parameter()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockClaims->shouldReceive('all')->andReturn(['sub' => 'test-uid-123']);
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn('input-token');
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('input-token')
        ->andReturn($mockToken);
        $this->request->attributes = new \Symfony\Component\HttpFoundation\ParameterBag();
        $response = $this->middleware->handle($this->request, $this->next);
        expect($response->getContent())->toBe('Success');
    }

    #[Test]
    public function it_token_from_cookie()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockClaims->shouldReceive('all')->andReturn(['sub' => 'test-uid-123']);
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn('cookie-token');
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('cookie-token')
        ->andReturn($mockToken);
        $this->request->attributes = new \Symfony\Component\HttpFoundation\ParameterBag();
        $response = $this->middleware->handle($this->request, $this->next);
        expect($response->getContent())->toBe('Success');
    }

    #[Test]
    public function it_returns_401_for_invalid_token()
    {
        $this->request->shouldReceive('header')->with('Authorization')->andReturn('Bearer invalid-token');
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('invalid-token')
        ->andThrow(new \Exception('Invalid token'));
        $response = $this->middleware->handle($this->request, $this->next);
        expect($response->getStatusCode())->toBe(401);
        $content = json_decode($response->getContent(), true);
        expect($content['error'])->toBe('Invalid Firebase token');
    }

    #[Test]
    public function it_returns_401_for_missing_token()
    {
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $response = $this->middleware->handle($this->request, $this->next);
        expect($response->getStatusCode())->toBe(401);
        $content = json_decode($response->getContent(), true);
        expect($content['error'])->toBe('Missing Firebase token');
    }

    #[Test]
    public function it_continues_without_token_when_optional()
    {
        $this->request->shouldReceive('header')->with('Authorization')->andReturn(null);
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $response = $this->middleware->handle($this->request, $this->next, 'optional');
        expect($response->getContent())->toBe('Success');
    }

    #[Test]
    public function it_continues_with_invalid_token_when_optional()
    {
        $this->request->shouldReceive('header')->with('Authorization')->andReturn('Bearer invalid-token');
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('invalid-token')
        ->andThrow(new \Exception('Invalid token'));
        $response = $this->middleware->handle($this->request, $this->next, 'optional');
        expect($response->getContent())->toBe('Success');
    }

    #[Test]
    public function it_still_processes_valid_token_when_optional()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockClaims->shouldReceive('all')->andReturn(['sub' => 'test-uid-123']);
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn('Bearer valid-token');
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('valid-token')
        ->andReturn($mockToken);
        $this->request->attributes = new \Symfony\Component\HttpFoundation\ParameterBag();
        $response = $this->middleware->handle($this->request, $this->next, 'optional');
        expect($response->getContent())->toBe('Success');
    }

    #[Test]
    public function it_extracts_token_from_bearer_header_correctly()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockClaims->shouldReceive('all')->andReturn(['sub' => 'test-uid-123']);
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $this->request->shouldReceive('header')->with('Authorization')->andReturn('Bearer eyJhbGciOiJSUzI1NiJ9.test.token');
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('eyJhbGciOiJSUzI1NiJ9.test.token')
        ->andReturn($mockToken);
        $this->request->attributes = new \Symfony\Component\HttpFoundation\ParameterBag();
        $response = $this->middleware->handle($this->request, $this->next);
        expect($response->getContent())->toBe('Success');
    }

    #[Test]
    public function it_ignores_nonbearer_authorization_headers()
    {
        $this->request->shouldReceive('header')->with('Authorization')->andReturn('Basic dXNlcjpwYXNz');
        $this->request->shouldReceive('query')->with('token')->andReturn(null);
        $this->request->shouldReceive('input')->with('token')->andReturn(null);
        $this->request->shouldReceive('cookie')->with('firebase_token')->andReturn(null);
        $response = $this->middleware->handle($this->request, $this->next);
        expect($response->getStatusCode())->toBe(401);
    }

}
