<?php

namespace JTD\FirebaseModels\Tests\Unit\Auth;

use JTD\FirebaseModels\Auth\User;
use JTD\FirebaseModels\Tests\Helpers\FirebaseAuthMock;
use JTD\FirebaseModels\Tests\TestSuites\UnitTestSuite;
use PHPUnit\Framework\Attributes\Test;

// Test model class
class AdvancedTestUser extends \JTD\FirebaseModels\Auth\FirebaseAuthenticatable
{
    protected ?string $collection = 'advanced_users';

    protected array $fillable = [
        'uid', 'email', 'name', 'role', 'department', 'permissions',
        'profile_data', 'settings', 'last_login', 'status',
    ];

    protected array $casts = [
        'permissions' => 'array',
        'profile_data' => 'array',
        'settings' => 'array',
        'last_login' => 'datetime',
        'email_verified_at' => 'datetime',
    ];
}

/**
 * FirebaseAuthenticatableAdvancedTest
 *
 * Converted from describe/it structure to PHPUnit class methods.
 * Generated by PHPUnit 12 Modernization Tool.
 */
class FirebaseAuthenticatableAdvancedTest extends UnitTestSuite
{
    protected function setUp(): void
    {
        parent::setUp();
        $this->clearFirestoreMocks();
        FirebaseAuthMock::initialize();
    }

    protected function tearDown(): void
    {
        // Reset is handled by clearFirestoreMocks in next test
        parent::tearDown();
    }

    #[Test]
    public function it_hydrate_from_firebase_id_token()
    {
        // Create test user and token
        $userData = FirebaseAuthMock::createTestUser([
            'email' => 'hydrate@example.com',
            'displayName' => 'Hydrate User',
            'emailVerified' => true,
        ]);
        $token = FirebaseAuthMock::createTestToken($userData['uid'], [
            'role' => 'admin',
            'department' => 'engineering',
        ]);
        // Create user model and hydrate from token
        $user = new AdvancedTestUser();
        $verifiedToken = FirebaseAuthMock::getInstance()->verifyIdToken($token);
        $user->hydrateFromFirebaseToken($verifiedToken);
        expect($user->uid)->toBe($userData['uid']);
        expect($user->email)->toBe('hydrate@example.com');
        expect($user->name)->toBe('Hydrate User');
        expect($user->hasVerifiedEmail())->toBeTrue();
        // Check custom claims
        $claims = $user->getFirebaseToken()->claims()->all();
        expect($claims['role'])->toBe('admin');
        expect($claims['department'])->toBe('engineering');
    }

    #[Test]
    public function it_hydrate_from_firebase_userrecord()
    {
        // Create test user
        $userData = FirebaseAuthMock::createTestUser([
            'email' => 'record@example.com',
            'displayName' => 'Record User',
            'photoURL' => 'https://example.com/photo.jpg',
            'phoneNumber' => '+1234567890',
        ]);
        $userRecord = FirebaseAuthMock::getInstance()->getUser($userData['uid']);
        // Create user model and hydrate from UserRecord
        $user = new AdvancedTestUser();
        $user->setFirebaseUserRecord($userRecord);
        expect($user->uid)->toBe($userData['uid']);
        expect($user->email)->toBe('record@example.com');
        expect($user->name)->toBe('Record User');
        expect($user->photo_url)->toBe('https://example.com/photo.jpg');
        expect($user->phone_number)->toBe('+1234567890');
    }

    #[Test]
    public function it_handle_missing_optional_fields_gracefully()
    {
        // Create minimal user data
        $userData = FirebaseAuthMock::createTestUser([
            'email' => 'minimal@example.com',
            // No displayName, photoURL, etc.
        ]);
        $userRecord = FirebaseAuthMock::getInstance()->getUser($userData['uid']);
        $user = new AdvancedTestUser();
        $user->setFirebaseUserRecord($userRecord);
        expect($user->uid)->toBe($userData['uid']);
        expect($user->email)->toBe('minimal@example.com');
        expect($user->name)->toBeNull();
        expect($user->photo_url)->toBeNull();
        expect($user->phone_number)->toBeNull();
    }

    #[Test]
    public function it_implements_laravel_authenticatable_interface_correctly()
    {
        $user = new AdvancedTestUser([
            'uid' => 'test-uid-123',
            'email' => 'auth@example.com',
            'name' => 'Auth User',
        ]);
        // Test Authenticatable interface methods
        expect($user->getAuthIdentifierName())->toBe('uid');
        expect($user->getAuthIdentifier())->toBe('test-uid-123');
        // Firebase doesn't use passwords - should throw exception
        expect(function () use ($user) {
            $user->getAuthPassword();
        })->toThrow(\BadMethodCallException::class);
        expect($user->getRememberToken())->toBeNull(); // Firebase doesn't use remember tokens
        // Test remember token methods (should be no-ops)
        $user->setRememberToken('some-token');
        expect($user->getRememberToken())->toBeNull();
        expect($user->getRememberTokenName())->toBeNull(); // Firebase doesn't use remember tokens
    }

    #[Test]
    public function it_check_email_verification_status()
    {
        $user = new AdvancedTestUser();
        // Initially not verified
        expect($user->hasVerifiedEmail())->toBeFalse();
        // Set verification timestamp
        $user->email_verified_at = now();
        expect($user->hasVerifiedEmail())->toBeTrue();
        // Test with null timestamp
        $user->email_verified_at = null;
        expect($user->hasVerifiedEmail())->toBeFalse();
    }

    #[Test]
    public function it_mark_email_as_verified()
    {
        $user = new AdvancedTestUser();
        expect($user->hasVerifiedEmail())->toBeFalse();
        $user->markEmailAsVerified();
        expect($user->hasVerifiedEmail())->toBeTrue();
        expect($user->email_verified_at)->toBeInstanceOf(\Illuminate\Support\Carbon::class);
    }

    #[Test]
    public function it_store_and_retrieve_firebase_token()
    {
        $userData = FirebaseAuthMock::createTestUser();
        $token = FirebaseAuthMock::createTestToken($userData['uid']);
        $verifiedToken = FirebaseAuthMock::getInstance()->verifyIdToken($token);
        $user = new AdvancedTestUser();
        $user->setFirebaseToken($verifiedToken);
        $retrievedToken = $user->getFirebaseToken();
        expect($retrievedToken)->toBe($verifiedToken);
        // Test token claims access
        $claims = $retrievedToken->claims()->all();
        expect($claims['sub'])->toBe($userData['uid']);
    }

    #[Test]
    public function it_clear_firebase_token()
    {
        $userData = FirebaseAuthMock::createTestUser();
        $token = FirebaseAuthMock::createTestToken($userData['uid']);
        $verifiedToken = FirebaseAuthMock::getInstance()->verifyIdToken($token);
        $user = new AdvancedTestUser();
        $user->setFirebaseToken($verifiedToken);
        expect($user->getFirebaseToken())->not->toBeNull();
        $user->clearFirebaseToken();
        expect($user->getFirebaseToken())->toBeNull();
    }

    #[Test]
    public function it_check_if_user_firebase_token()
    {
        $user = new AdvancedTestUser();
        expect($user->hasFirebaseToken())->toBeFalse();
        $userData = FirebaseAuthMock::createTestUser();
        $token = FirebaseAuthMock::createTestToken($userData['uid']);
        $verifiedToken = FirebaseAuthMock::getInstance()->verifyIdToken($token);
        $user->setFirebaseToken($verifiedToken);
        expect($user->hasFirebaseToken())->toBeTrue();
    }

    #[Test]
    public function it_access_custom_claims_from_token()
    {
        $userData = FirebaseAuthMock::createTestUser();
        $token = FirebaseAuthMock::createTestToken($userData['uid'], [
            'admin' => true,
            'role' => 'manager',
            'permissions' => ['read', 'write'],
            'department' => 'engineering',
        ]);
        $verifiedToken = FirebaseAuthMock::getInstance()->verifyIdToken($token);
        $user = new AdvancedTestUser();
        $user->setFirebaseToken($verifiedToken);
        $claims = $user->getCustomClaims();
        expect($claims['admin'])->toBeTrue();
        expect($claims['role'])->toBe('manager');
        expect($claims['permissions'])->toBe(['read', 'write']);
        expect($claims['department'])->toBe('engineering');
    }

    #[Test]
    public function it_check_specific_custom_claims()
    {
        $userData = FirebaseAuthMock::createTestUser();
        $token = FirebaseAuthMock::createTestToken($userData['uid'], [
            'admin' => true,
            'role' => 'user',
        ]);
        $verifiedToken = FirebaseAuthMock::getInstance()->verifyIdToken($token);
        $user = new AdvancedTestUser();
        $user->setFirebaseToken($verifiedToken);
        expect($user->hasCustomClaim('admin'))->toBeTrue();
        expect($user->hasCustomClaim('role'))->toBeTrue();
        expect($user->hasCustomClaim('nonexistent'))->toBeFalse();
        expect($user->getCustomClaim('admin'))->toBeTrue();
        expect($user->getCustomClaim('role'))->toBe('user');
        expect($user->getCustomClaim('nonexistent'))->toBeNull();
        expect($user->getCustomClaim('nonexistent', 'default'))->toBe('default');
    }

    #[Test]
    public function it_returns_empty_array_when_no_token_set()
    {
        $user = new AdvancedTestUser();
        expect($user->getCustomClaims())->toBe([]);
        expect($user->hasCustomClaim('admin'))->toBeFalse();
        expect($user->getCustomClaim('role'))->toBeNull();
    }

    #[Test]
    public function it_access_provider_data_from_userrecord()
    {
        // Create user with provider data
        $userData = FirebaseAuthMock::createTestUser([
            'email' => 'provider@example.com',
            'providerData' => [
                [
                    'providerId' => 'google.com',
                    'uid' => 'google-uid-123',
                    'email' => 'provider@gmail.com',
                    'displayName' => 'Google User',
                ],
                [
                    'providerId' => 'facebook.com',
                    'uid' => 'facebook-uid-456',
                    'email' => 'provider@facebook.com',
                ],
            ],
        ]);
        $userRecord = FirebaseAuthMock::getInstance()->getUser($userData['uid']);
        $user = new AdvancedTestUser();
        $user->setFirebaseUserRecord($userRecord);
        $providerData = $user->getProviderData();
        expect($providerData)->toBeArray();
        expect(count($providerData))->toBe(2);
        // Check Google provider
        $googleProvider = collect($providerData)->firstWhere('providerId', 'google.com');
        expect($googleProvider['uid'])->toBe('google-uid-123');
        expect($googleProvider['email'])->toBe('provider@gmail.com');
        // Check Facebook provider
        $facebookProvider = collect($providerData)->firstWhere('providerId', 'facebook.com');
        expect($facebookProvider['uid'])->toBe('facebook-uid-456');
    }

    #[Test]
    public function it_check_if_user_specific_provider()
    {
        $userData = FirebaseAuthMock::createTestUser([
            'providerData' => [
                ['providerId' => 'google.com', 'uid' => 'google-123'],
                ['providerId' => 'github.com', 'uid' => 'github-456'],
            ],
        ]);
        $userRecord = FirebaseAuthMock::getInstance()->getUser($userData['uid']);
        $user = new AdvancedTestUser();
        $user->setFirebaseUserRecord($userRecord);
        expect($user->hasProvider('google.com'))->toBeTrue();
        expect($user->hasProvider('github.com'))->toBeTrue();
        expect($user->hasProvider('facebook.com'))->toBeFalse();
        expect($user->hasProvider('twitter.com'))->toBeFalse();
    }

    #[Test]
    public function it_serialize_to_array()
    {
        $user = new AdvancedTestUser([
            'uid' => 'test-uid',
            'email' => 'serialize@example.com',
            'name' => 'Serialize User',
            'role' => 'admin',
            'permissions' => ['read', 'write'],
        ]);
        $array = $user->toArray();
        expect($array['uid'])->toBe('test-uid');
        expect($array['email'])->toBe('serialize@example.com');
        expect($array['name'])->toBe('Serialize User');
        expect($array['role'])->toBe('admin');
        expect($array['permissions'])->toBe(['read', 'write']);
        // Firebase token should be hidden by default
        expect($array)->not->toHaveKey('firebase_token');
    }

    #[Test]
    public function it_serialize_to_json()
    {
        $user = new AdvancedTestUser([
            'uid' => 'json-uid',
            'email' => 'json@example.com',
            'name' => 'JSON User',
        ]);
        $json = $user->toJson();
        $decoded = json_decode($json, true);
        expect($decoded['uid'])->toBe('json-uid');
        expect($decoded['email'])->toBe('json@example.com');
        expect($decoded['name'])->toBe('JSON User');
    }

    #[Test]
    public function it_cast_attributes_correctly()
    {
        $user = new AdvancedTestUser([
            'permissions' => ['read', 'write', 'delete'],
            'profile_data' => ['age' => 30, 'city' => 'New York'],
            'last_login' => '2023-01-01 12:00:00',
        ]);
        expect($user->permissions)->toBeArray();
        expect($user->permissions)->toBe(['read', 'write', 'delete']);
        expect($user->profile_data)->toBeArray();
        expect($user->profile_data['age'])->toBe(30);
        expect($user->last_login)->toBeInstanceOf(\Illuminate\Support\Carbon::class);
    }
}
