<?php

namespace JTD\FirebaseModels\Tests\Unit\Auth;

use JTD\FirebaseModels\Auth\FirebaseUserProvider;
use JTD\FirebaseModels\Auth\User;
use Illuminate\Contracts\Hashing\Hasher;
use Mockery as m;
use JTD\FirebaseModels\Tests\TestSuites\UnitTestSuite;
use PHPUnit\Framework\Attributes\Test;

/**
 * FirebaseUserProviderTest
 * 
 * Converted from describe/it structure to PHPUnit class methods.
 * Generated by PHPUnit 12 Modernization Tool.
 */
class FirebaseUserProviderTest extends UnitTestSuite
{
    protected function setUp(): void
    {
        parent::setUp();
        $this->clearFirestoreMocks();
        // Mock Firebase Auth
        $this->firebaseAuth = m::mock(\Kreait\Firebase\Contract\Auth::class);
        // Mock Hasher
        $this->hasher = m::mock(Hasher::class);
        // Create provider instance
        $this->provider = new FirebaseUserProvider(
        $this->firebaseAuth,
        User::class,
        $this->hasher
        );
    }

    protected function tearDown(): void
    {
        m::close();
        parent::tearDown();
    }

    #[Test]
    public function it_retrieve_user_by_id()
    {
        $mockFirebaseUser = m::mock(\Kreait\Firebase\Auth\UserRecord::class);
        $mockFirebaseUser->uid = 'test-uid-123';
        $mockFirebaseUser->email = 'test@example.com';
        $mockFirebaseUser->displayName = 'Test User';
        $mockFirebaseUser->emailVerified = true;
        $mockFirebaseUser->photoUrl = null;
        $mockFirebaseUser->phoneNumber = null;
        $mockFirebaseUser->customClaims = [];
        $mockFirebaseUser->providerData = [];
        $mockFirebaseUser->metadata = m::mock();
        $mockFirebaseUser->metadata->lastSignInTime = null;
        $mockFirebaseUser->metadata->creationTime = null;
        $this->firebaseAuth->shouldReceive('getUser')
        ->with('test-uid-123')
        ->andReturn($mockFirebaseUser);
        $user = $this->provider->retrieveById('test-uid-123');
        expect($user)->toBeInstanceOf(User::class);
        expect($user->uid)->toBe('test-uid-123');
        expect($user->email)->toBe('test@example.com');
        expect($user->name)->toBe('Test User');
    }

    #[Test]
    public function it_returns_null_for_nonexistent_user()
    {
        $this->firebaseAuth->shouldReceive('getUser')
        ->with('non-existent-uid')
        ->andThrow(new \Kreait\Firebase\Exception\Auth\UserNotFound());
        $user = $this->provider->retrieveById('non-existent-uid');
        expect($user)->toBeNull();
    }

    #[Test]
    public function it_retrieve_user_by_token()
    {
        // For Firebase, retrieveByToken just calls retrieveById
        $mockFirebaseUser = m::mock(\Kreait\Firebase\Auth\UserRecord::class);
        $mockFirebaseUser->uid = 'test-uid-123';
        $mockFirebaseUser->email = 'test@example.com';
        $mockFirebaseUser->displayName = 'Test User';
        $mockFirebaseUser->emailVerified = true;
        $mockFirebaseUser->photoUrl = null;
        $mockFirebaseUser->phoneNumber = null;
        $mockFirebaseUser->customClaims = [];
        $mockFirebaseUser->providerData = [];
        $mockFirebaseUser->metadata = m::mock();
        $mockFirebaseUser->metadata->lastSignInTime = null;
        $mockFirebaseUser->metadata->creationTime = null;
        $this->firebaseAuth->shouldReceive('getUser')
        ->with('test-uid-123')
        ->andReturn($mockFirebaseUser);
        $user = $this->provider->retrieveByToken('test-uid-123', 'some-token');
        expect($user)->toBeInstanceOf(User::class);
        expect($user->uid)->toBe('test-uid-123');
    }

    #[Test]
    public function it_retrieve_user_by_credentials_with_valid_token()
    {
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockClaims->shouldReceive('get')->with('email')->andReturn('test@example.com');
        $mockClaims->shouldReceive('get')->with('email_verified', false)->andReturn(true);
        $mockClaims->shouldReceive('get')->with('name')->andReturn('Test User');
        $mockClaims->shouldReceive('get')->with('picture')->andReturn(null);
        $mockClaims->shouldReceive('get')->with('phone_number')->andReturn(null);
        $mockClaims->shouldReceive('all')->andReturn([
        'sub' => 'test-uid-123',
        'email' => 'test@example.com',
        'email_verified' => true,
        'name' => 'Test User',
        'iss' => 'firebase',
        'aud' => 'project-id',
        'iat' => time(),
        'exp' => time() + 3600,
        ]);
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('valid-token')
        ->andReturn($mockToken);
        // Mock that user doesn't exist yet
        $this->firebaseAuth->shouldReceive('getUser')
        ->with('test-uid-123')
        ->andThrow(new \Kreait\Firebase\Exception\Auth\UserNotFound());
        $user = $this->provider->retrieveByCredentials(['token' => 'valid-token']);
        expect($user)->toBeInstanceOf(User::class);
        expect($user->uid)->toBe('test-uid-123');
        expect($user->email)->toBe('test@example.com');
        expect($user->name)->toBe('Test User');
    }

    #[Test]
    public function it_returns_null_for_invalid_token()
    {
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('invalid-token')
        ->andThrow(new \Kreait\Firebase\JWT\Error\IdTokenVerificationFailed('Invalid token'));
        $user = $this->provider->retrieveByCredentials(['token' => 'invalid-token']);
        expect($user)->toBeNull();
    }

    #[Test]
    public function it_returns_null_when_no_token_provided()
    {
        $user = $this->provider->retrieveByCredentials([]);
        expect($user)->toBeNull();
    }

    #[Test]
    public function it_validates_credentials_with_matching_token_uid()
    {
        $mockUser = m::mock(User::class);
        $mockUser->shouldReceive('getAuthIdentifier')->andReturn('test-uid-123');
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('test-uid-123');
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('valid-token')
        ->andReturn($mockToken);
        $result = $this->provider->validateCredentials($mockUser, ['token' => 'valid-token']);
        expect($result)->toBeTrue();
    }

    #[Test]
    public function it_fails_validation_with_mismatched_token_uid()
    {
        $mockUser = m::mock(User::class);
        $mockUser->shouldReceive('getAuthIdentifier')->andReturn('test-uid-123');
        $mockToken = m::mock(\Lcobucci\JWT\UnencryptedToken::class);
        $mockClaims = m::mock();
        $mockClaims->shouldReceive('get')->with('sub')->andReturn('different-uid');
        $mockToken->shouldReceive('claims')->andReturn($mockClaims);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('valid-token')
        ->andReturn($mockToken);
        $result = $this->provider->validateCredentials($mockUser, ['token' => 'valid-token']);
        expect($result)->toBeFalse();
    }

    #[Test]
    public function it_fails_validation_with_invalid_token()
    {
        $mockUser = m::mock(User::class);
        $this->firebaseAuth->shouldReceive('verifyIdToken')
        ->with('invalid-token')
        ->andThrow(new \Kreait\Firebase\JWT\Error\IdTokenVerificationFailed('Invalid token'));
        $result = $this->provider->validateCredentials($mockUser, ['token' => 'invalid-token']);
        expect($result)->toBeFalse();
    }

    #[Test]
    public function it_fails_validation_with_no_token()
    {
        $mockUser = m::mock(User::class);
        $result = $this->provider->validateCredentials($mockUser, []);
        expect($result)->toBeFalse();
    }

    #[Test]
    public function it_create_model_instance()
    {
        $user = $this->provider->createModel();
        expect($user)->toBeInstanceOf(User::class);
    }

    #[Test]
    public function it_get_and_set_model_class()
    {
        expect($this->provider->getModel())->toBe(User::class);
        $result = $this->provider->setModel('App\\Models\\CustomUser');
        expect($result)->toBe($this->provider);
        expect($this->provider->getModel())->toBe('App\\Models\\CustomUser');
    }

    #[Test]
    public function it_get_firebase_auth_instance()
    {
        expect($this->provider->getFirebaseAuth())->toBe($this->firebaseAuth);
    }

    #[Test]
    public function it_get_hasher_instance()
    {
        expect($this->provider->getHasher())->toBe($this->hasher);
    }

    #[Test]
    public function it_handles_remember_token_methods_gracefully()
    {
        $mockUser = m::mock(User::class);
        // These should not throw exceptions
        $this->provider->updateRememberToken($mockUser, 'some-token');
        // Test passes if no exception is thrown
        expect(true)->toBeTrue();
    }

    #[Test]
    public function it_handles_password_rehashing_gracefully()
    {
        $mockUser = m::mock(User::class);
        // This should not throw exceptions (Firebase handles passwords)
        $this->provider->rehashPasswordIfRequired($mockUser, ['token' => 'some-token']);
        // Test passes if no exception is thrown
        expect(true)->toBeTrue();
    }

}
