<?php

namespace JTD\FirebaseModels\Tests\Unit\Scopes;

use JTD\FirebaseModels\Firestore\FirestoreModel;
use JTD\FirebaseModels\Tests\Helpers\FirestoreMock;
use JTD\FirebaseModels\Tests\TestSuites\UnitTestSuite;
use PHPUnit\Framework\Attributes\Test;

// Test model class
class TestModelWithScopes extends FirestoreModel
{
    protected ?string $collection = 'test_models';

    protected array $fillable = ['name', 'email', 'status', 'age', 'active', 'published'];

    // Simple local scope
    public function scopeActive($query)
    {
        return $query->where('active', true);
    }

    // Local scope with parameters
    public function scopeStatus($query, string $status)
    {
        return $query->where('status', $status);
    }

    // Local scope with multiple parameters
    public function scopeAgeRange($query, int $minAge, int $maxAge)
    {
        return $query->where('age', '>=', $minAge)
            ->where('age', '<=', $maxAge);
    }

    // Complex local scope
    public function scopePublishedAndActive($query)
    {
        return $query->where('published', true)
            ->where('active', true)
            ->orderBy('created_at', 'desc');
    }

    // Local scope with conditional logic
    public function scopeByRole($query, ?string $role = null)
    {
        if ($role) {
            return $query->where('role', $role);
        }

        return $query;
    }

    // Local scope that returns a specific result
    public function scopeAdmins($query)
    {
        return $query->where('role', 'admin');
    }

    // Local scope with complex where conditions
    public function scopeRecentlyActive($query, int $days = 30)
    {
        return $query->where('active', true)
            ->where('last_login_at', '>=', now()->subDays($days));
    }
}

/**
 * LocalScopesTest
 *
 * Converted from describe/it structure to PHPUnit class methods.
 * Generated by PHPUnit 12 Modernization Tool.
 */
class LocalScopesTest extends UnitTestSuite
{
    protected function setUp(): void
    {
        parent::setUp();
        FirestoreMock::initialize();
        // Configure cache for testing
        config([
            'cache.default' => 'array',
            'cache.stores.array' => [
                'driver' => 'array',
                'serialize' => false,
            ],
            'firebase-models.cache.store' => 'array',
            'firebase-models.cache.enabled' => false, // Disable caching for scope tests
        ]);
    }

    protected function tearDown(): void
    {
        FirestoreMock::clear();
        parent::tearDown();
    }

    #[Test]
    public function it_detect_local_scopes()
    {
        $model = new TestModelWithScopes();
        expect($model->hasLocalScope('active'))->toBeTrue();
        expect($model->hasLocalScope('status'))->toBeTrue();
        expect($model->hasLocalScope('ageRange'))->toBeTrue();
        expect($model->hasLocalScope('publishedAndActive'))->toBeTrue();
        expect($model->hasLocalScope('byRole'))->toBeTrue();
        expect($model->hasLocalScope('admins'))->toBeTrue();
        expect($model->hasLocalScope('recentlyActive'))->toBeTrue();
        expect($model->hasLocalScope('nonExistent'))->toBeFalse();
    }

    #[Test]
    public function it_get_all_local_scopes()
    {
        $model = new TestModelWithScopes();
        $scopes = $model->getLocalScopes();
        expect($scopes)->toBeArray();
        expect($scopes)->toHaveKey('active');
        expect($scopes)->toHaveKey('status');
        expect($scopes)->toHaveKey('ageRange');
        expect($scopes)->toHaveKey('publishedAndActive');
        expect($scopes)->toHaveKey('byRole');
        expect($scopes)->toHaveKey('admins');
        expect($scopes)->toHaveKey('recentlyActive');
        expect($scopes['active'])->toBe('scopeActive');
        expect($scopes['status'])->toBe('scopeStatus');
    }

    #[Test]
    public function it_get_local_scope_names()
    {
        $model = new TestModelWithScopes();
        $scopeNames = $model->getLocalScopeNames();
        expect($scopeNames)->toContain('active');
        expect($scopeNames)->toContain('status');
        expect($scopeNames)->toContain('ageRange');
        expect($scopeNames)->toContain('publishedAndActive');
        expect($scopeNames)->toContain('byRole');
        expect($scopeNames)->toContain('admins');
        expect($scopeNames)->toContain('recentlyActive');
    }

    #[Test]
    public function it_apply_simple_local_scopes()
    {
        FirestoreMock::createDocument('test_models', 'doc1', ['name' => 'Active User', 'active' => true]);
        FirestoreMock::createDocument('test_models', 'doc2', ['name' => 'Inactive User', 'active' => false]);
        $activeUsers = TestModelWithScopes::active()->get();
        expect($activeUsers)->toBeInstanceOf(\Illuminate\Support\Collection::class);
        expect($activeUsers->count())->toBe(1);
        expect($activeUsers->first()->name)->toBe('Active User');
    }

    #[Test]
    public function it_chain_simple_scopes()
    {
        FirestoreMock::createDocument('test_models', 'doc1', [
            'name' => 'Active Published User',
            'active' => true,
            'published' => true,
        ]);
        FirestoreMock::createDocument('test_models', 'doc2', [
            'name' => 'Active Unpublished User',
            'active' => true,
            'published' => false,
        ]);
        $users = TestModelWithScopes::active()->publishedAndActive()->get();
        expect($users->count())->toBe(1);
        expect($users->first()->name)->toBe('Active Published User');
    }

    #[Test]
    public function it_apply_scopes_with_single_parameter()
    {
        FirestoreMock::createDocument('test_models', 'doc1', ['name' => 'Admin User', 'status' => 'admin']);
        FirestoreMock::createDocument('test_models', 'doc2', ['name' => 'Regular User', 'status' => 'user']);
        $admins = TestModelWithScopes::status('admin')->get();
        expect($admins->count())->toBe(1);
        expect($admins->first()->name)->toBe('Admin User');
    }

    #[Test]
    public function it_apply_scopes_with_multiple_parameters()
    {
        FirestoreMock::createDocument('test_models', 'doc1', ['name' => 'Young User', 'age' => 20]);
        FirestoreMock::createDocument('test_models', 'doc2', ['name' => 'Middle User', 'age' => 35]);
        FirestoreMock::createDocument('test_models', 'doc3', ['name' => 'Old User', 'age' => 60]);
        $middleAged = TestModelWithScopes::ageRange(25, 45)->get();
        expect($middleAged->count())->toBe(1);
        expect($middleAged->first()->name)->toBe('Middle User');
    }

    #[Test]
    public function it_apply_scopes_with_optional_parameters()
    {
        FirestoreMock::createDocument('test_models', 'doc1', ['name' => 'Admin User', 'role' => 'admin']);
        FirestoreMock::createDocument('test_models', 'doc2', ['name' => 'Regular User', 'role' => 'user']);
        // With parameter
        $admins = TestModelWithScopes::byRole('admin')->get();
        expect($admins->count())->toBe(1);
        expect($admins->first()->name)->toBe('Admin User');
        // Without parameter (should return all)
        $allUsers = TestModelWithScopes::byRole()->get();
        expect($allUsers->count())->toBe(2);
    }

    #[Test]
    public function it_chain_multiple_scopes()
    {
        FirestoreMock::createDocument('test_models', 'doc1', [
            'name' => 'Active Admin',
            'active' => true,
            'status' => 'admin',
            'age' => 30,
        ]);
        FirestoreMock::createDocument('test_models', 'doc2', [
            'name' => 'Inactive Admin',
            'active' => false,
            'status' => 'admin',
            'age' => 30,
        ]);
        FirestoreMock::createDocument('test_models', 'doc3', [
            'name' => 'Active User',
            'active' => true,
            'status' => 'user',
            'age' => 30,
        ]);
        $activeAdmins = TestModelWithScopes::active()
            ->status('admin')
            ->ageRange(25, 35)
            ->get();
        expect($activeAdmins->count())->toBe(1);
        expect($activeAdmins->first()->name)->toBe('Active Admin');
    }

    #[Test]
    public function it_chain_scopes_with_regular_query_methods()
    {
        FirestoreMock::createDocument('test_models', 'doc1', [
            'name' => 'Alice',
            'active' => true,
            'email' => 'alice@example.com',
        ]);
        FirestoreMock::createDocument('test_models', 'doc2', [
            'name' => 'Bob',
            'active' => true,
            'email' => 'bob@example.com',
        ]);
        $user = TestModelWithScopes::active()
            ->where('email', 'alice@example.com')
            ->first();
        expect($user)->not->toBeNull();
        expect($user->name)->toBe('Alice');
    }

    #[Test]
    public function it_throws_exception_for_nonexistent_scope()
    {
        expect(function () {
            TestModelWithScopes::nonExistentScope()->get();
        })->toThrow(\BadMethodCallException::class);
    }

    #[Test]
    public function it_handles_scope_method_calls_correctly()
    {
        $model = new TestModelWithScopes();
        expect(function () use ($model) {
            $model->callScope('nonExistentScope');
        })->toThrow(\BadMethodCallException::class);
    }

    #[Test]
    public function it_call_scopes_dynamically_on_model_instances()
    {
        FirestoreMock::createDocument('test_models', 'doc1', ['name' => 'Active User', 'active' => true]);
        $model = new TestModelWithScopes();
        $activeUsers = $model->active()->get();
        expect($activeUsers->count())->toBe(1);
        expect($activeUsers->first()->name)->toBe('Active User');
    }

    #[Test]
    public function it_call_scopes_dynamically_on_model_class()
    {
        FirestoreMock::createDocument('test_models', 'doc1', ['name' => 'Admin User', 'status' => 'admin']);
        $admins = TestModelWithScopes::status('admin')->get();
        expect($admins->count())->toBe(1);
        expect($admins->first()->name)->toBe('Admin User');
    }

    #[Test]
    public function it_works_with_pagination()
    {
        for ($i = 1; $i <= 10; $i++) {
            FirestoreMock::createDocument('test_models', "doc{$i}", [
                'name' => "User {$i}",
                'active' => $i % 2 === 0, // Even numbers are active
            ]);
        }
        $activePage = TestModelWithScopes::active()->paginate(3);
        expect($activePage)->toBeInstanceOf(\Illuminate\Pagination\LengthAwarePaginator::class);
        expect($activePage->count())->toBe(3);
        expect($activePage->total())->toBe(5); // 5 active users
    }

    #[Test]
    public function it_works_with_aggregates()
    {
        FirestoreMock::createDocument('test_models', 'doc1', ['name' => 'Active User 1', 'active' => true]);
        FirestoreMock::createDocument('test_models', 'doc2', ['name' => 'Active User 2', 'active' => true]);
        FirestoreMock::createDocument('test_models', 'doc3', ['name' => 'Inactive User', 'active' => false]);
        $activeCount = TestModelWithScopes::active()->count();
        expect($activeCount)->toBe(2);
    }

    #[Test]
    public function it_works_with_ordering_and_limiting()
    {
        FirestoreMock::createDocument('test_models', 'doc1', [
            'name' => 'User A',
            'active' => true,
            'created_at' => '2023-01-01',
        ]);
        FirestoreMock::createDocument('test_models', 'doc2', [
            'name' => 'User B',
            'active' => true,
            'created_at' => '2023-01-02',
        ]);
        $latestActive = TestModelWithScopes::active()
            ->orderBy('created_at', 'desc')
            ->limit(1)
            ->get();
        expect($latestActive->count())->toBe(1);
        // The scope is working correctly if we get exactly 1 active user
        expect($latestActive->first()->active)->toBeTrue();
    }
}
